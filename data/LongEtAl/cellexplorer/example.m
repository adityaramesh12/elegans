function example()% function example()% An example of processing a 3D image of C.elegans L1 through the atlas% pipeline% F. Long% 20080818% --------------------------% parameters initialization % --------------------------% ----- parameters needed in multiple stepsidx = [1]; % change, index of all stacks in the folder, e.g., [1:6]ind = [1]; % change, which stack to process, e.g., [2 3 6]ind2 = [1]; % change, which stack in ind for auto-annotation, e.g. [1 2] (meaning stack 2 and 3 are to be auto-annotated)testStackIdx = [1];% change, which stack in DAPI-segmented to auto% linename = 'cnd1threeL1';linename = 'eft3RW10035L1';indatadirprefix = ['C:/Documents and Settings/Stuart Kim/My Documents/MATLAB/', linename, '/']; % changeoutdatadirprefix = ['data/', linename, '/']; % changefilename = cell(1,length(idx));for i=1:length(idx)%      filename(i) = {'cnd1threeL1_122906'}; %change    filename(i) = {'eft3RW10035L1_012507'}; %changeend;for i=1:length(filename)    indatadir(i) = {[indatadirprefix, filename{i}]};    outdatadir(i) = {[outdatadirprefix, filename{i}]};    prefix(i) = {[filename{i}, num2str(idx(i)), '_Series008']}; % change         datadir(i) = {[outdatadirprefix, filename{i}, num2str(idx(i))]};end;i = 1;prefix(i) = {[filename{i}, num2str(idx(i)), '_Separation_00']};id_rfp = 1; % changeid_gfp = 2; % changeid_dapi = 3; % changeid_dapis(ind) = id_dapi;id_gfps(ind) = id_gfp;GFPdatadir = [outdatadirprefix, 'GFP/ss'];RFPdatadir = [outdatadirprefix, 'RFP/ss'];DAPIdatadir = [outdatadirprefix, 'DAPI/ss']; GFPCorrectdatadir = [outdatadirprefix, 'GFPcor/ss'];% --- parameters needed for straightening, preprocessing, and segmentationGFPtag = 1;RFPtag = 0;useGFPRFPtag = 1;xy_rez = 0.116257;z_rez = 0.122110;zoom_f = 0.6;channelNo = 3;channel_id = [1,2,3]; % order: rfp, gfp, dapipsfSize = [20,20,80];deconvolutionTag = 0;% --- parameters needed for generating annotation fileswanodirroot = ['data/'];wanodir = [wanodirroot, linename, '/']; % change to your own% ------- parameters needed for automated cell namingcellNameFile = 'standardNamesInOrder357.txt'; % change to your own dir, only need to change oncecellnumanno = 357;for i=1:length(ind2)    testGFPFilename(i) = {[GFPCorrectdatadir, num2str(ind(ind2(i))), '_segNucleiOrdered.mat']}; % the following sentences are for back-compatibility in some cases    %     if ~exist(testGFPFilename{i})%         testGFPFilename(i) = {[GFPCorrectdatadir, num2str(ind(ind2(i))), '_segNuclei.mat']}; %     end;end;anofilenameprefix = cell(1,length(idx));for i=1:length(idx)    annofilenameprefix(i) = {[wanodir, filename{i},num2str(idx(i))]};end;locPatTestFilename = [outdatadirprefix, 'normCellPos.mat']; % output location dataverifytag = 0;annotatedTag = 0;trainingStackIdx = [3,4,5,9,10,15,16,17,22,26,27,29,33,38];locPatTrainingFilename = 'training_data/XYZcoord_357cells_40stacks_removenouse_reanno_recompute.mat';reglocPatTrainingFilename = 'training_data/affine14stacks_357cells_357markers_reanno_recompute.mat';outfilename = [outdatadirprefix, 'recogResGFP.mat']; graphfilename = 'APDVLRtraining.mat'; graphTag = 1;annotatedCellIdx = [1:357]; %annotated cell index%--------------------------% display processing menu%--------------------------fprintf('\n');fprintf('-----------------------------------\n');fprintf('Processing Menu of CellExplorer 1.0\n');fprintf('-----------------------------------\n\n');%%fprintf('0. Straightening \n');fprintf('1. Checking straightening results \n');fprintf('2. Preprocessing for GFP/RFP/DAPI segmentation \n');fprintf('3. GFP/RFP segmentation \n');fprintf('4. Generating VANO annotation files for GFP (for segmentation correction) \n');fprintf('5. Manually check and correct GFP segmentation in VANO \n');fprintf('6. Refine GFP segmentation results \n');fprintf('7. DAPI segmentation \n');fprintf('8. Generating VANO annotation files for DAPI \n');fprintf('9. Automated GFP annotation \n');fprintf('10. Manually check GFP annotation results and manually annotate some difficult cells in VANO \n');fprintf('11. Automated annotation of the remaining cells \n');fprintf('12. Correct automated annotation errors \n');fprintf('13. Analyzing gene expression levels \n');fprintf('14. Quit \n');fprintf('\n');funcnum = input('Please select (e.g., 1, or [1 2 3 4 5], or 5): ');%--------------------------% Step 0: straightening%--------------------------if (~isempty(find(funcnum == 0)))     batch_straightening_stacks4(id_rfp, id_gfp, id_dapi,indatadir(ind),outdatadir(ind), prefix(ind), idx(ind), xy_rez, z_rez, zoom_f); end;%--------------------------------% step 1: check straightening results%--------------------------------if (~isempty(find(funcnum == 1)))     for i=1:length(ind),        tmpfilename = [outdatadirprefix, filename{ind(i)}, num2str(idx(ind(i))), '_crop_straight.raw'];        a = permute(uint8(loadRaw2Stack(tmpfilename)), [ 2 1 3 4]);        %writeim(permute(a, [2 1 3 4]), [tmpfilename(1:end-3) 'ics']); %automatically generate the ICS file        writeim(a, [tmpfilename(1:end-3) 'ics']); %automatically generate the ICS file        dip_image(a(:,:,:,id_dapi))        joinchannels('rgb', a(:,:,:,id_rfp), a(:,:,:,id_dapi))                fprintf('\nTip: When the two windows are open and active, you can press N (next) or P (previous) keys to go through all z-slices of the two 3D stacks.\n');                while (1),            tmp = input('Press Q key (followed by Enter key) to finish step 1: ','s');            if (tmp=='q' | tmp=='Q'),                break;            end;        end;        close all;    end;end;%---------------------------------------------% step 2: Preprocessing for GFP/RFP/DAPI segmeneation%---------------------------------------------if (~isempty(find(funcnum == 2)))     batch_preprocessing_stacks(psfSize, ind, datadir, channelNo,channel_id,deconvolutionTag); end;%---------------------------------------------% step 3: GFP/RFP segmeneation%---------------------------------------------if (~isempty(find(funcnum == 3)))         if (GFPtag==1)        tmpdir = [outdatadirprefix, 'GFP'];        if ~exist(tmpdir, 'dir')            mkdir(tmpdir);        end;    end;                if (RFPtag==1)        tmpdir = [outdatadirprefix, 'RFP'];        if ~exist(tmpdir, 'dir')            mkdir(tmpdir);        end;    end;    batch_segmentationGFPRFP(ind, datadir, GFPdatadir, RFPdatadir,GFPtag, RFPtag); end;%---------------------------------------------% step 4: Generating VANO annotation files for GFP%---------------------------------------------if (~isempty(find(funcnum == 4))),     for k=1:length(ind),        i = ind(k);        inimgname = [datadir{i}, '_crop_straight.ics'];        inimg = uint8(readim(inimgname));        %inimg = permute(inimg, [2 1 3 4]);        filenamePrefix = [GFPdatadir, num2str(i)];        segfilename = [filenamePrefix, '_segNucleiOrdered.mat'];        load(segfilename);        main_genWebData_DAPI(inimg, segres, filenamePrefix, id_gfp);    end;    batch_genano(wanodir, outdatadirprefix, filename, idx, ind, 'gfp');end;%---------------------------------------------% step 5: Manually check and correct GFP segmentation in VANO%---------------------------------------------if (~isempty(find(funcnum == 5)))     fprintf('You should use VANO to check the GFP segmentation and manually correct errors \n');end;% ---------------------------------------% step 6: Refine GFP segmentation results % ---------------------------------------if (~isempty(find(funcnum == 6)))    batch_refineGFPseg(wanodir, filename, idx, GFPdatadir, GFPCorrectdatadir,id_gfp, id_dapi);end;% --------------------------% step 7: DAPI segmentation % --------------------------% if (~isempty(find(funcnum == 7)))     tmpdir = [outdatadirprefix, 'DAPI'];    if ~exist(tmpdir, 'dir')        mkdir(tmpdir);    end;        batch_segmentationDAPI(ind, datadir, DAPIdatadir, RFPdatadir,GFPCorrectdatadir, GFPtag, RFPtag, useGFPRFPtag);end;%----------------------------------------------------% step 8. Generating VANO annotation files for DAPI%----------------------------------------------------if (~isempty(find(funcnum == 8)))     for k=1:length(ind)        i = ind(k);        inimgname = [datadir{i}, '_crop_straight.ics'];        inimg = uint8(readim(inimgname));        filenamePrefix = [DAPIdatadir, num2str(i)];        segfilename = [filenamePrefix, '_segNucleiOrdered.mat'];        load(segfilename);        main_genWebData_DAPI(inimg, segres, filenamePrefix, id_dapi);    end;    for i=1:length(ind)        load([outdatadirprefix, 'DAPI/ss', num2str(ind(i)), '_segNucleiOrdered.mat']);        img = permute(segres,[2 1 3]);        img = img(end:-1:1,:,:);        filename1 = [datadir{ind(i)},'_segNucleiOrdered.raw'];        saveStack2Raw(img,filename1);        filename1 = [datadir{ind(i)},'_crop_straight.ics'];        inimg = uint8(readim(filename1));        inimg = permute(inimg, [2,1,3,4]);        filename1 = [datadir{ind(i)},'_crop_straight.raw'];        saveStack2Raw(inimg,filename1);    end;     batch_genano(wanodir, outdatadirprefix, filename, idx, ind, 'dapi');end;% %----------------------------------% Step 9. Automated GFP annotation %-----------------------------------if (~isempty(find(funcnum == 9))),        %% copy the critcal mask and apo file to the data root directory    file_DAPIseg = [outdatadirprefix 'DAPI/' filename{ind(i)}, num2str(idx(ind(i))), '.ano.mask.raw'];    file_DAPIseg_copy = [outdatadirprefix filename{ind(i)}, num2str(idx(ind(i))), '.ano.mask.raw'];    copyfile(file_DAPIseg, file_DAPIseg_copy);            file_apo = [outdatadirprefix 'DAPI/' filename{ind(i)}, num2str(idx(ind(i))), '.apo'];    file_apo_copy = [outdatadirprefix filename{ind(i)}, num2str(idx(ind(i))), '.apo'];    copyfile(file_apo, file_apo_copy);    file_ano = [outdatadirprefix 'DAPI/' filename{ind(i)}, num2str(idx(ind(i))), '.ano'];    file_ano_copy = [outdatadirprefix filename{ind(i)}, num2str(idx(ind(i))), '.ano'];    copyfile(file_ano, file_ano_copy);        %%        filenamePrefix1 = cell(1,length(ind));    for i=1:length(ind)      filenamePrefix1(i) = {[wanodir, filename{ind(i)},num2str(ind(i))]};    end;   filenamePrefix2 = cell(1,length(ind));   for i=1:length(ind)       filenamePrefix2(i) = {[outdatadirprefix, filename{ind(i)},num2str(ind(i))]};   end;   	     %extract cell positions    extractCellPositions2(annofilenameprefix, ind, locPatTestFilename, cellNameFile, cellnumanno);    % gfp auto-annotation    pl = recogcells_gfp4(locPatTestFilename, locPatTrainingFilename, ...        filenamePrefix1, filenamePrefix2, testGFPFilename, ind2, ...        trainingStackIdx, cellNameFile, outfilename, verifytag, id_gfp, id_dapi);       end;% -----------------------------------------------------------------------------% Step 10. Manually check GFP annotation results and manually annotate some% difficult cells in VANO % -----------------------------------------------------------------------------if (~isempty(find(funcnum == 10))),     fprintf('You should use VANO to fulfill this task\n');end;% -----------------------------------------------------% Step 11. Automated annotation of the remaining cells% -----------------------------------------------------if (~isempty(find(funcnum == 11))),              filenamePrefix1 = cell(1,length(ind));    for i=1:length(ind)      filenamePrefix1(i) = {[wanodir, filename{ind(i)},num2str(ind(i))]};    end;   filenamePrefix2 = cell(1,length(ind));   for i=1:length(ind)       filenamePrefix2(i) = {[outdatadirprefix, filename{ind(i)},num2str(ind(i))]};   end;   	    % dapi auto-annotation    recogcells_dapi2(datadir, graphTag, graphfilename, locPatTestFilename, ...        locPatTrainingFilename, reglocPatTrainingFilename, testStackIdx, ...        trainingStackIdx, annofilenameprefix, cellNameFile, cellnumanno, annotatedCellIdx);end;% ---------------------------------------------% Step 12. Correct automated annotation errors % ---------------------------------------------if (~isempty(find(funcnum == 12))),    fprintf('You should use VANO to fulfill this task\n');end;% -----------------------------------------% Step 13. Analyzing gene expression levels% -----------------------------------------if (~isempty(find(funcnum == 13))), 	expressionAnalyzer(annofilenameprefix, ind, id_rfp, id_gfp, id_dapi);end;% -----------------------------------------% Step 14. Just Quit% -----------------------------------------if (~isempty(find(funcnum == 14))),     return;end;
