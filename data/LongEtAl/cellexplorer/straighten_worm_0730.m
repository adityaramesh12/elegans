function straightbody = straighten_worm_0730(inimg0, bpos, npt)% function straightbody = straighten_worm_0730(inimg0, bpos, npt)%% straighten the bended worm%% Copyright Hanchuan Pengif nargin<3,    npt = 121;end;if isa(inimg0, 'uint8')==0,  inimg0 = uint8(inimg0);end;if nargin<2,  [bpos] = elegantail_backbone(inimg0);end;imgsz = size(inimg0);hh=cscvn([bpos(:).y; bpos(:).x]); %%need spline toolbox[pt,tmp]=fnplt(hh,'j');  %%need spline toolboxpt = pt([2 1], :); k=0;i=1;while i<=size(pt,2),    if ~isnan(pt(1,i)) & ~isnan(pt(2,i)),        k=k+1;        newpt(:,k) = pt(:,i);        i=i+1;    else,        i=i+2;     end;end;pt = newpt;for i=1:size(pt,2)-1,     d(i)=sqrt(sum((pt(:,i)-pt(:,i+1)).^2)); end;gdstep=1;NPlane=round(sum(d)/gdstep);Ndpoint = length(d);dsum = [0 cumsum(d)];cutpt = zeros(2, NPlane);cutpt(:,NPlane) = pt(:,end);thispos = 1;for i=1:NPlane-1,    curwin0 = max(1,thispos);    curwin1 = min(Ndpoint, thispos+10);    targetlen = (i-1)*gdstep;    tmp = sign((dsum(curwin0:curwin1)-targetlen));    if ~isempty(find(tmp==0)),        cutpt(:,i) = pt(:,thispos+find(tmp==0)-1);        thispos = thispos+find(tmp==0)-1; %% update the window starting location        continue;    end;    inega = find(tmp==-1)-1;    iposi = find(tmp==1)-1;    if isempty(inega) | isempty(iposi), %%????? phc 0803        continue;    end;try,    ptnega = pt(:,thispos+inega(end));    ptposi = pt(:,thispos+iposi(1));catch,    fprintf('keyboard...\n');    keyboard;end;    fnega = abs(dsum(thispos+inega(end)) - targetlen);\    fposi = abs(dsum(thispos+iposi(1)) - targetlen);    f0 = 1 - fnega/(fnega+fposi);    f1 = 1 - fposi/(fnega+fposi);    cutpt(:,i) = f0*ptnega + f1*ptposi;    thispos = thispos+inega(end); end;%%% ============= cutpt = cutpt(:,1:NPlane-1); % discard the last cutting planeNPlane = size(cutpt,2);for i=1:size(cutpt,2)-1,     myd(i)=sqrt(sum((cutpt(:,i)-cutpt(:,i+1)).^2)); end;fprintf('The variance of the re-sampled points distance is %d while mean is %d.\n', var(myd), mean(myd));%%% ============= TipLen = 30;RadLen = 4;galpha = zeros(1, NPlane);deltay = zeros(1, NPlane);for i=TipLen+1:NPlane-TipLen,    deltay(i) = (cutpt(2,i+RadLen) - cutpt(2,i-RadLen));\    dtmp = sqrt((cutpt(2,i+RadLen) - cutpt(2,i-RadLen)).^2 + (cutpt(1,i+RadLen) - cutpt(1,i-RadLen)).^2);    galpha(i) = asin((cutpt(2,i+RadLen) - cutpt(2,i-RadLen)) ./ dtmp); %%     if (cutpt(1,i+RadLen) > cutpt(1,i-RadLen)),        galpha(i) = galpha(i);     else,        galpha(i) = pi - galpha(i);    end;    galpha(i) = galpha(i) - pi/2;     if (galpha(i)<-3.1415926) galpha(i)=-3.1415926; end;    if (galpha(i)>3.1415926) galpha(i)=3.1415926; end;end;galpha(1:TipLen) = galpha(TipLen+1);galpha(end-TipLen+1:end) = galpha(end-TipLen);deltay(1:TipLen) = deltay(TipLen+1);deltay(end-TipLen+1:end) = deltay(end-TipLen);%%% ========================= extend marginLen=70;extStep = cutpt(:,2)-cutpt(:,1);for i=marginLen:-1:1,    tmpPt = cutpt(:,1) - (marginLen - i + 1) .* extStep;    if (tmpPt(1)<1 | tmpPt(2)<1 | tmpPt(1)>imgsz(1)-1 | tmpPt(2)>imgsz(2)-1)        break;    end;    extPtHead(:,i) = tmpPt;    extGAlphaHead(1,i) = galpha(1);    extDeltaYHead(1,i) = deltay(1);end;if i>1,    extPtHead = extPtHead(:,i:end);    extGAlphaHead = extGAlphaHead(1,i:end);    extDeltaYHead = extDeltaYHead(1,i:end);end;extStep = cutpt(:,end)-cutpt(:,end-1);for i=1:1:marginLen,    tmpPt = cutpt(:,end) + i .* extStep;    if (tmpPt(1)<1 | tmpPt(2)<1 | tmpPt(1)>imgsz(1)-1 | tmpPt(2)>imgsz(2)-1), %%probably the starting pt should be 0 instead of 1. by PHC 060525        break;    end;    extPtTail(:,i) = tmpPt;    extGAlphaTail(1,i) = galpha(end);    extDeltaYTail(1,i) = deltay(end);end;cutpt = [extPtHead, cutpt, extPtTail];galpha = [extGAlphaHead, galpha, extGAlphaTail];deltay = [extDeltaYHead, deltay, extDeltaYTail];NPlane = size(cutpt, 2);testind = [1:1:NPlane];ptspace = 1;curplane = zeros(npt, imgsz(3));straightbody = repmat(uint8(0), [npt, NPlane, imgsz(3)]);straightbody = straight_nearestfill(uint8(inimg0), cutpt(1,testind), cutpt(2,testind), galpha(testind), npt);return;